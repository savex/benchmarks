#!/usr/bin/env bash
set -e

function get_var() {
    # if $1 and $2 exists, then we must use $1
    # if there is only $1, then $1 is actually empty and it is a $2 shown as $1
    # if nothing, then just break exit
    if [ -z $2 ]; then
        if [ -z $1 ]; then
            echo "Error in script while setting vars"
            exit 1
        else
            echo $1
        fi
    else
       echo $1
    fi
}

# Global vars
FIO_MOUNTPOINT=$( get_var $FIO_MOUNTPOINT "/tmp")
FIO_SIZE=$( get_var $FIO_SIZE "2G")
FIO_OFFSET_INCREMENT=$( get_var $FIO_OFFSET_INCREMENT "500M")
FIO_DIRECT=$( get_var $FIO_DIRECT "1")
FIO_IODEPTH=$( get_var $FIO_IODEPTH "64")

# IOPS test
IOPS_BS=$( get_var $IOPS_BS "4k")
IOPS_DP=$( get_var $IOPS_DP $FIO_IODEPTH)

# Bandwidth test
BW_BS=$( get_var $BW_BS "128k")
BW_DP=$( get_var $BW_DP $FIO_IODEPTH)

# Latency test
LAT_BS=$( get_var $LAT_BS "4k")
LAT_DP=$( get_var $LAT_DP "4")

# Sequential test
SEQ_BS=$( get_var $SEQ_BS "1M")
SEQ_DP=$( get_var $SEQ_DP "16")
SEQ_JOBS=$( get_var $SEQ_JOBS "4")

# Mixed test
MIX_BS=$( get_var $MIX_BS "4k")
MIX_DP=$( get_var $MIX_DP $FIO_IODEPTH)
MIX_RWMIXREAD=$( get_var $MIX_RWMIXREAD "75")

function run_fio() {
    fio --randrepeat=0 --verify=0 --ioengine=libaio --direct=$FIO_DIRECT --gtod_reduce=1 --name=$1 --filename=$DBENCH_MOUNTPOINT/fiotest --bs=$2 --iodepth=$3 --size=$FIO_SIZE --readwrite=$4 --time_based --ramp_time=2s --runtime=15s
}

function run_fio_seq() {
    fio --randrepeat=0 --verify=0 --ioengine=libaio --direct=$FIO_DIRECT --gtod_reduce=1 --name=$1 --filename=$DBENCH_MOUNTPOINT/fiotest --bs=$2 --iodepth=$3 --size=$FIO_SIZE --readwrite=$4 --time_based --ramp_time=2s --runtime=15s --thread --numjobs=${SEQ_JOBS} --offset_increment=$FIO_OFFSET_INCREMENT
}

# Tests
function test_iops_read() {
    READ_IOPS=$(run_fio read_iops $IOPS_BS $IOPS_DP randread)
    echo "$READ_IOPS" >$DBENCH_MOUNTPOINT/test_iops_read.log
    echo "$READ_IOPS"|grep -E 'read ?:'|grep -Eoi 'IOPS=[0-9k.]+'|cut -d'=' -f2
}

function test_iops_write() {
    WRITE_IOPS=$(run_fio write_iops $IOPS_BS $IOPS_DP randwrite)
    echo "$WRITE_IOPS" >$DBENCH_MOUNTPOINT/test_iops_write.log
    echo "$WRITE_IOPS"|grep -E 'write:'|grep -Eoi 'IOPS=[0-9k.]+'|cut -d'=' -f2
}

function test_bw_read() {
    READ_BW=$(run_fio read_bw $BW_BS $BW_DP randread)
    echo "$READ_BW" >$DBENCH_MOUNTPOINT/test_bw_read.log
    echo "$READ_BW"|grep -E 'read ?:'|grep -Eoi 'BW=[0-9GMKiBs/.]+'|cut -d'=' -f2
}

function test_bw_write() {
    WRITE_BW=$(run_fio write_bw $BW_BS $BW_DP randwrite)
    echo "$WRITE_BW" >$DBENCH_MOUNTPOINT/test_bw_write.log
    echo "$WRITE_BW"|grep -E 'write:'|grep -Eoi 'BW=[0-9GMKiBs/.]+'|cut -d'=' -f2
}

function test_latency_read() {
    READ_LATENCY=$(run_fio read_latency $LAT_BS $LAT_DP randread)
    echo "$READ_LATENCY" >$DBENCH_MOUNTPOINT/test_latency_read.log
    echo "$READ_LATENCY"|grep ' lat.*avg'|grep -Eoi 'avg=[0-9.]+'|cut -d'=' -f2
}

function test_latency_write() {
    WRITE_LATENCY=$(run_fio write_latency $LAT_BS $LAT_DP randwrite)
    echo "$WRITE_LATENCY" >$DBENCH_MOUNTPOINT/test_latency_write.log
    echo "$WRITE_LATENCY"|grep ' lat.*avg'|grep -Eoi 'avg=[0-9.]+'|cut -d'=' -f2
}

function test_seq_read() {
    READ_SEQ=$(run_fio_seq read_seq $SEQ_BS $SEQ_DP read)
    echo "$READ_SEQ" >$DBENCH_MOUNTPOINT/test_seq_read.log
    echo "$READ_SEQ"|grep -E 'READ:'|grep -Eoi '(aggrb|bw)=[0-9GMKiBs/.]+'|cut -d'=' -f2
}

function test_seq_write() {
    WRITE_SEQ=$(run_fio_seq write_seq $SEQ_BS $SEQ_DP write)
    echo "$WRITE_SEQ" >$DBENCH_MOUNTPOINT/test_seq_write.log
    echo "$WRITE_SEQ"|grep -E 'WRITE:'|grep -Eoi '(aggrb|bw)=[0-9GMKiBs/.]+'|cut -d'=' -f2
}

# Main
echo "Working dir: ${DBENCH_MOUNTPOINT}"
echo "Size: ${FIO_SIZE}"
echo "Offset increment: ${FIO_OFFSET_INCREMENT}"
echo "Direct flag set to ${FIO_DIRECT}"
echo "Default iodepth: $FIO_IODEPTH"
if [ "$DBENCH_QUICK" == "" ] || [ "$DBENCH_QUICK" == "no" ]; then
    echo "Quick test: no"
else
    echo "Quick test: yes"
fi
echo

if [ "$1" = 'fio' ]; then

    echo "# Testing Read IOPS ($IOPS_BS/$IOPS_DP/$FIO_SIZE)"
    READ_IOPS_VAL=$(test_iops_read)

    echo "# Testing Write IOPS ($IOPS_BS/$IOPS_DP/$FIO_SIZE)"
    WRITE_IOPS_VAL=$(test_iops_write)

    echo "# Testing Read Bandwidth ($BW_BS/$BW_DP/$FIO_SIZE)"
    READ_BW_VAL=$(test_bw_read)

    echo "# Testing Write Bandwidth ($BW_BS/$BW_DP/$FIO_SIZE)"
    WRITE_BW_VAL=$(test_bw_write)

    if [ "$DBENCH_QUICK" == "" ] || [ "$DBENCH_QUICK" == "no" ]; then
        echo "# Testing Read Latency ($LAT_BS/$LAT_DP/$FIO_SIZE)"
        READ_LATENCY_VAL=$(test_latency_read)

        echo "# Testing Write Latency ($LAT_BS/$LAT_DP/$FIO_SIZE)"
        WRITE_LATENCY_VAL=$(test_latency_write)

        echo "# Testing Read Sequential Speed ($SEQ_BS/$SEQ_DP/$FIO_SIZE, $SEQ_JOBS jobs, offset $FIO_OFFSET_INCREMENT)"
        READ_SEQ_VAL=$(test_seq_read)

        echo "# Testing Write Sequential Speed ($SEQ_BS/$SEQ_DP/$FIO_SIZE, $SEQ_JOBS jobs, offset $FIO_OFFSET_INCREMENT)"
        WRITE_SEQ_VAL=$(test_seq_write)

        echo "# Testing Read/Write Mixed ($MIX_BS/$MIX_DP/$FIO_SIZE, rwmixread at $MIX_RWMIXREAD%)"
        RW_MIX=$(fio --randrepeat=0 --verify=0 --ioengine=libaio --direct=$FIO_DIRECT --gtod_reduce=1 --name=rw_mix --filename=$DBENCH_MOUNTPOINT/fiotest --bs=$MIX_BS --iodepth=$MIX_DP --size=$FIO_SIZE --readwrite=randrw --rwmixread=$MIX_RWMIXREAD --time_based --ramp_time=2s --runtime=15s)
        echo "$RW_MIX" >$DBENCH_MOUNTPOINT/test_mix_readwrite.log
        RW_MIX_R_IOPS=$(echo "$RW_MIX"|grep -E 'read ?:'|grep -Eoi 'IOPS=[0-9k.]+'|cut -d'=' -f2)
        RW_MIX_W_IOPS=$(echo "$RW_MIX"|grep -E 'write:'|grep -Eoi 'IOPS=[0-9k.]+'|cut -d'=' -f2)
    fi

    echo All tests complete.
    echo
    echo ==================
    echo = Dbench Summary =
    echo ==================
    echo "Random Read/Write IOPS: $READ_IOPS_VAL/$WRITE_IOPS_VAL. BW: $READ_BW_VAL / $WRITE_BW_VAL"
    if [ -z $DBENCH_QUICK ] || [ "$DBENCH_QUICK" == "no" ]; then
        echo "Average Latency (usec) Read/Write: $READ_LATENCY_VAL/$WRITE_LATENCY_VAL"
        echo "Sequential Read/Write: $READ_SEQ_VAL / $WRITE_SEQ_VAL"
        echo "Mixed Random Read/Write IOPS: $RW_MIX_R_IOPS/$RW_MIX_W_IOPS"
    fi

    rm $DBENCH_MOUNTPOINT/fiotest
    exit 0
fi

exec "$@"
